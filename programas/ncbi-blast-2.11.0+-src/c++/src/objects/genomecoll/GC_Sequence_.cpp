/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'genome_collection.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/genomecoll/GC_Sequence.hpp>
#include <objects/genomecoll/GC_SequenceStats.hpp>
#include <objects/genomecoll/GC_TaggedSequences.hpp>
#include <objects/genomecoll/GC_TypedSeqId.hpp>
#include <objects/seq/Delta_ext.hpp>
#include <objects/seq/Seq_annot.hpp>
#include <objects/seq/Seq_descr.hpp>
#include <objects/seqloc/Seq_id.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CGC_Sequence_Base::, EPatch_type, true)
{
    SET_ENUM_INTERNAL_NAME("GC-Sequence", "patch-type");
    SET_ENUM_MODULE("NCBI-GenomeCollection");
    ADD_ENUM_VALUE("novel", ePatch_type_novel);
    ADD_ENUM_VALUE("fix", ePatch_type_fix);
    ADD_ENUM_VALUE("other", ePatch_type_other);
}
END_ENUM_INFO

void CGC_Sequence_Base::ResetSeq_id(void)
{
    if ( !m_Seq_id ) {
        m_Seq_id.Reset(new TSeq_id());
        return;
    }
    (*m_Seq_id).Reset();
}

void CGC_Sequence_Base::SetSeq_id(CGC_Sequence_Base::TSeq_id& value)
{
    m_Seq_id.Reset(&value);
}

void CGC_Sequence_Base::ResetSeq_id_synonyms(void)
{
    m_Seq_id_synonyms.clear();
    m_set_State[0] &= ~0xc;
}

void CGC_Sequence_Base::ResetDescr(void)
{
    m_Descr.Reset();
}

void CGC_Sequence_Base::SetDescr(CGC_Sequence_Base::TDescr& value)
{
    m_Descr.Reset(&value);
}

CGC_Sequence_Base::TDescr& CGC_Sequence_Base::SetDescr(void)
{
    if ( !m_Descr )
        m_Descr.Reset(new TDescr());
    return (*m_Descr);
}

void CGC_Sequence_Base::ResetAnnot(void)
{
    m_Annot.clear();
    m_set_State[0] &= ~0xc0;
}

void CGC_Sequence_Base::ResetSequences(void)
{
    m_Sequences.clear();
    m_set_State[0] &= ~0x300;
}

void CGC_Sequence_Base::ResetStructure(void)
{
    m_Structure.Reset();
}

void CGC_Sequence_Base::SetStructure(CGC_Sequence_Base::TStructure& value)
{
    m_Structure.Reset(&value);
}

CGC_Sequence_Base::TStructure& CGC_Sequence_Base::SetStructure(void)
{
    if ( !m_Structure )
        m_Structure.Reset(new TStructure());
    return (*m_Structure);
}

void CGC_Sequence_Base::ResetStats(void)
{
    m_Stats.Reset();
}

void CGC_Sequence_Base::SetStats(CGC_Sequence_Base::TStats& value)
{
    m_Stats.Reset(&value);
}

CGC_Sequence_Base::TStats& CGC_Sequence_Base::SetStats(void)
{
    if ( !m_Stats )
        m_Stats.Reset(new TStats());
    return (*m_Stats);
}

void CGC_Sequence_Base::ResetRoles(void)
{
    m_Roles.clear();
    m_set_State[0] &= ~0x30000;
}

void CGC_Sequence_Base::Reset(void)
{
    ResetSeq_id();
    ResetSeq_id_synonyms();
    ResetDescr();
    ResetAnnot();
    ResetSequences();
    ResetStructure();
    ResetStats();
    ResetPatch_type();
    ResetRoles();
}

BEGIN_NAMED_BASE_CLASS_INFO("GC-Sequence", CGC_Sequence)
{
    SET_CLASS_MODULE("NCBI-GenomeCollection");
    ADD_NAMED_REF_MEMBER("seq-id", m_Seq_id, CSeq_id);
    ADD_NAMED_MEMBER("seq-id-synonyms", m_Seq_id_synonyms, STL_list_set, (STL_CRef, (CLASS, (CGC_TypedSeqId))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("descr", m_Descr, CSeq_descr)->SetOptional();
    ADD_NAMED_MEMBER("annot", m_Annot, STL_list_set, (STL_CRef, (CLASS, (CSeq_annot))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("sequences", m_Sequences, STL_list_set, (STL_CRef, (CLASS, (CGC_TaggedSequences))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("structure", m_Structure, CDelta_ext)->SetOptional();
    ADD_NAMED_REF_MEMBER("stats", m_Stats, CGC_SequenceStats)->SetOptional();
    ADD_NAMED_ENUM_MEMBER("patch-type", m_Patch_type, EPatch_type)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("roles", m_Roles, STL_list_set, (ENUM, (int, EGC_SequenceRole)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(22001);
    info->DataSpec(ncbi::EDataSpec::eASN);
}
END_CLASS_INFO

// constructor
CGC_Sequence_Base::CGC_Sequence_Base(void)
    : m_Patch_type((EPatch_type)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetSeq_id();
    }
}

// destructor
CGC_Sequence_Base::~CGC_Sequence_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

