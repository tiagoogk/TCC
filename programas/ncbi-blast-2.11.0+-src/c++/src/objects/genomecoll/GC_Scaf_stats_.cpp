/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'genome_collection.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/genomecoll/GC_Scaf_stats.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CGC_Scaf_stats_Base::, EStats_category, true)
{
    SET_ENUM_INTERNAL_NAME("GC-Scaf-stats", "stats-category");
    SET_ENUM_MODULE("NCBI-GenomeCollection");
    ADD_ENUM_VALUE("replicon-count", eStats_category_replicon_count);
    ADD_ENUM_VALUE("scaffold-count", eStats_category_scaffold_count);
    ADD_ENUM_VALUE("component-count", eStats_category_component_count);
    ADD_ENUM_VALUE("component-span-count", eStats_category_component_span_count);
    ADD_ENUM_VALUE("total-length", eStats_category_total_length);
    ADD_ENUM_VALUE("ungapped-length", eStats_category_ungapped_length);
    ADD_ENUM_VALUE("min-gapped-scaf-length", eStats_category_min_gapped_scaf_length);
    ADD_ENUM_VALUE("max-gapped-scaf-length", eStats_category_max_gapped_scaf_length);
    ADD_ENUM_VALUE("min-ungapped-scaf-length", eStats_category_min_ungapped_scaf_length);
    ADD_ENUM_VALUE("max-ungapped-scaf-length", eStats_category_max_ungapped_scaf_length);
    ADD_ENUM_VALUE("active-finishing-bases", eStats_category_active_finishing_bases);
    ADD_ENUM_VALUE("draft-bases", eStats_category_draft_bases);
    ADD_ENUM_VALUE("finished-bases", eStats_category_finished_bases);
    ADD_ENUM_VALUE("whole-genome-finishing-bases", eStats_category_whole_genome_finishing_bases);
    ADD_ENUM_VALUE("other-sequences", eStats_category_other_sequences);
    ADD_ENUM_VALUE("pre-draft", eStats_category_pre_draft);
    ADD_ENUM_VALUE("wgs-bases", eStats_category_wgs_bases);
    ADD_ENUM_VALUE("bases-in-spanned-gaps", eStats_category_bases_in_spanned_gaps);
    ADD_ENUM_VALUE("n50", eStats_category_n50);
    ADD_ENUM_VALUE("spanned-gaps", eStats_category_spanned_gaps);
    ADD_ENUM_VALUE("unspanned-gaps", eStats_category_unspanned_gaps);
    ADD_ENUM_VALUE("bases-in-unspanned-gaps", eStats_category_bases_in_unspanned_gaps);
    ADD_ENUM_VALUE("count-contig", eStats_category_count_contig);
    ADD_ENUM_VALUE("contig-n50", eStats_category_contig_n50);
    ADD_ENUM_VALUE("contig-L50", eStats_category_contig_L50);
    ADD_ENUM_VALUE("contig-n75", eStats_category_contig_n75);
    ADD_ENUM_VALUE("contig-n90", eStats_category_contig_n90);
    ADD_ENUM_VALUE("scaf-L50", eStats_category_scaf_L50);
    ADD_ENUM_VALUE("scaf-n75", eStats_category_scaf_n75);
    ADD_ENUM_VALUE("scaf-n90", eStats_category_scaf_n90);
    ADD_ENUM_VALUE("is-there-unplaced-scaf", eStats_category_is_there_unplaced_scaf);
    ADD_ENUM_VALUE("count-singleton-unordered-scaffold", eStats_category_count_singleton_unordered_scaffold);
    ADD_ENUM_VALUE("count-chr-made-of-singleton-ordered-scaffold", eStats_category_count_chr_made_of_singleton_ordered_scaffold);
    ADD_ENUM_VALUE("count-chr-with-single-component", eStats_category_count_chr_with_single_component);
    ADD_ENUM_VALUE("count-singleton-in-minus-orientation", eStats_category_count_singleton_in_minus_orientation);
    ADD_ENUM_VALUE("count-unknown-gaps", eStats_category_count_unknown_gaps);
    ADD_ENUM_VALUE("count-implicit-scaf-src-name", eStats_category_count_implicit_scaf_src_name);
    ADD_ENUM_VALUE("count-explicit-scaf-src-name", eStats_category_count_explicit_scaf_src_name);
    ADD_ENUM_VALUE("all-chr-has-single-component", eStats_category_all_chr_has_single_component);
    ADD_ENUM_VALUE("count-scaf-with-terminal-gaps", eStats_category_count_scaf_with_terminal_gaps);
    ADD_ENUM_VALUE("count-chr-with-terminal-gaps", eStats_category_count_chr_with_terminal_gaps);
    ADD_ENUM_VALUE("count-uniq-components", eStats_category_count_uniq_components);
    ADD_ENUM_VALUE("count-uniq-component-diff-from-last-release", eStats_category_count_uniq_component_diff_from_last_release);
    ADD_ENUM_VALUE("count-chromosome-types", eStats_category_count_chromosome_types);
    ADD_ENUM_VALUE("count-chromosome-terminal-gap-types", eStats_category_count_chromosome_terminal_gap_types);
    ADD_ENUM_VALUE("count-dropped-components", eStats_category_count_dropped_components);
    ADD_ENUM_VALUE("count-non-chromosome-replicon", eStats_category_count_non_chromosome_replicon);
    ADD_ENUM_VALUE("count-assembly-units", eStats_category_count_assembly_units);
    ADD_ENUM_VALUE("count-alt-loci-units", eStats_category_count_alt_loci_units);
    ADD_ENUM_VALUE("count-fixed-patches", eStats_category_count_fixed_patches);
    ADD_ENUM_VALUE("count-novel-patches", eStats_category_count_novel_patches);
    ADD_ENUM_VALUE("count-regions", eStats_category_count_regions);
    ADD_ENUM_VALUE("count-patches", eStats_category_count_patches);
    ADD_ENUM_VALUE("count-par-regions", eStats_category_count_par_regions);
    ADD_ENUM_VALUE("count-genomic-regions", eStats_category_count_genomic_regions);
    ADD_ENUM_VALUE("count-chromosome-replicons", eStats_category_count_chromosome_replicons);
    ADD_ENUM_VALUE("assembly-status", eStats_category_assembly_status);
    ADD_ENUM_VALUE("net-count-scaffold", eStats_category_net_count_scaffold);
    ADD_ENUM_VALUE("net-count-component", eStats_category_net_count_component);
    ADD_ENUM_VALUE("count-regions-contain-alt-loci", eStats_category_count_regions_contain_alt_loci);
    ADD_ENUM_VALUE("count-regions-contain-fix-patch", eStats_category_count_regions_contain_fix_patch);
    ADD_ENUM_VALUE("count-regions-contain-novel-patch", eStats_category_count_regions_contain_novel_patch);
    ADD_ENUM_VALUE("count-fix-patch-with-alignment", eStats_category_count_fix_patch_with_alignment);
    ADD_ENUM_VALUE("count-novel-patch-with-alignment", eStats_category_count_novel_patch_with_alignment);
    ADD_ENUM_VALUE("count-alt-scaf-with-alignment", eStats_category_count_alt_scaf_with_alignment);
    ADD_ENUM_VALUE("count-alt-loci-scaf", eStats_category_count_alt_loci_scaf);
    ADD_ENUM_VALUE("count-real-scaffolds", eStats_category_count_real_scaffolds);
    ADD_ENUM_VALUE("top-level-count", eStats_category_top_level_count);
    ADD_ENUM_VALUE("total-gap-length", eStats_category_total_gap_length);
    ADD_ENUM_VALUE("count-replicons-without-ordered-scaf", eStats_category_count_replicons_without_ordered_scaf);
    ADD_ENUM_VALUE("other", eStats_category_other);
}
END_ENUM_INFO

void CGC_Scaf_stats_Base::Reset(void)
{
    ResetStats_category();
    ResetValue();
}

BEGIN_NAMED_BASE_CLASS_INFO("GC-Scaf-stats", CGC_Scaf_stats)
{
    SET_CLASS_MODULE("NCBI-GenomeCollection");
    ADD_NAMED_ENUM_MEMBER("stats-category", m_Stats_category, EStats_category)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("value", m_Value)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(22001);
    info->DataSpec(ncbi::EDataSpec::eASN);
}
END_CLASS_INFO

// constructor
CGC_Scaf_stats_Base::CGC_Scaf_stats_Base(void)
    : m_Stats_category((EStats_category)(0)), m_Value(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CGC_Scaf_stats_Base::~CGC_Scaf_stats_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

